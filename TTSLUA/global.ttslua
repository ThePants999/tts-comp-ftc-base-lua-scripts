--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]

-- Having all these GUIDs centrally managed helps to ensure that any changes to
-- them only need to be made in one place, and hard-to-find stuff isn't inadvertently
-- broken.
--
-- If you're looking at this and thinking "surely this should be a table" - why,
-- yes it should. Unfortunately, I saw the documentation for Object.getVar said
-- "Cannot return a table", and missed that Object.getTable existed, and now I'm
-- too lazy to change it all again.
centerCircle_GUID = "51ee2f"
quarterCircle_GUID = "51ee3f"
templateObjective_GUID = "573333"
startMenu_GUID = "738804"
redDiceMat_GUID = "c57d70"
blueDiceMat_GUID = "a84ed2"
redDiceRoller_GUID = "beae28"
blueDiceRoller_GUID = "4e0e0b"
redMissionManager_GUID = "cff35b"
blueMissionManager_GUID = "471de1"
redVPCounter_GUID = "8b0541"
blueVPCounter_GUID = "a77a54"
redCPCounter_GUID = "e446f7"
blueCPCounter_GUID = "deb9f2"
redTurnCounter_GUID = "055302"
blueTurnCounter_GUID = "7e4111"
gameTurnCounter_GUID = "ee92cf"
scoresheet_GUID = "06d627"
blankObjCard_GUID = "d618cb"
activation_GUID = "229946"
wounds_GUID = "ad63ba"

table_GUID = "948ce5"
felt_GUID = "28865a"
mat_GUID = "4ee1f2"
matURLDisplay_GUID = "c5e288"
flexControl_GUID = "bd69bd"
tableLeg1_GUID = "afc863"
tableLeg2_GUID = "c8edca"
tableLeg3_GUID = "393bf7"
tableLeg4_GUID = "12c65e"
tableSideBottom_GUID = "f938a2"
tableSideTop_GUID = "35b95f"
tableSideLeft_GUID = "9f95fd"
tableSideRight_GUID = "5af8f2"
extractTerrain_GUID = "70b9f6"

redHandZone_GUID = "f7d85a"
blueHandZone_GUID = "731345"
redHiddenZone_GUID = "28419e"
blueHiddenZone_GUID = "e1e91a"
deploymentCardZone_GUID = "dcf95b"
missionCardZone_GUID = "cdecf2"
primaryCardZone_GUID = "740abc"
secondary11CardZone_GUID = "0ec215"
secondary12CardZone_GUID = "d865d4"
secondary21CardZone_GUID = "3c8d71"
secondary22CardZone_GUID = "88cac4"

deploymentDeck_GUID = "2dc2e8"
missionDeck_GUID = "ffdf05"
primaryDeck_GUID = "d26e9c"
redSecondaryDeck_GUID = "c0fb49"
blueSecondaryDeck_GUID = "e1da3b"

CPMissionBook_GUID = "731ec4"

--[[
GUID reference for primary / mission / deployment cards
Yeah, I could use variables but I didn't, oh well

Pariah Nexus:
-------------

Burden of Trust 85718e
Linchpin 540fd0
Purge the Foe d9d35a
Scorched Earth 6860de
Supply Drop 981226
Take and Hold bffd57
Terraform 7fa6d0
The Ritual 7067e2
Unexploded Ordnance 41f293

Adapt or Die 9650f1
Fog of War c58f11
Hidden Supplies c4fe8c
Inspired Leadership 499169
Prepared Positions 9789b7
Raise Banners 62e744
Rapid Escalation d35008
Smoke and Mirrors 25b5a6
Stalwarts 8b7dbc
Swift Action dc273c

Crucible of Battle e96d18
Dawn of War 7f45dc
Hammer and Anvil 97f3f0
Search and Destroy 09c961
Sweeping Engagement c6edf3
Tipping Point 77cde6

]]--

missionPackData = {
    {
        id = MISSION_PACK_LEVIATHAN,
        name = "Leviathan",
        deploymentDeck_GUID = "a30deb",
        missionDeck_GUID = "1665ca",
        primaryDeck_GUID = "3ca4a6",
        gambitDeck_GUID = "d0a9f9",
        fixedSecondaryDeck_GUID = "30c8fe",
        redSecondaryDeck_GUID = "2c6243",
        blueSecondaryDeck_GUID = nil,
        tournamentMissions = {
            -- Take and Hold / Chilling Rain / Search and Destroy
            {name = "A", primary = "884291", mission = "db0022", deployment = "ad4220"},
            -- Priority Targets / Hidden Supplies / Search and Destroy
            {name = "B", primary = "f97708", mission = "0dc3c3", deployment = "ad4220"},
            -- The Ritual / Scrambler Fields / Sweeping Engagement
            {name = "C", primary = "646b49", mission = "aea986", deployment = "381d7c"},
            -- Deploy Servo-skulls / Chilling Rain / Search and Destroy
            {name = "D", primary = "44ff29", mission = "db0022", deployment = "ad4220"},
            -- Take and Hold / Chosen Battlefield / Sweeping Engagement
            {name = "E", primary = "884291", mission = "876ac7", deployment = "381d7c"},
            -- Supply Drop / Chilling Rain / Search and Destroy
            {name = "F", primary = "a34ae1", mission = "db0022", deployment = "ad4220"},
            -- Sites of Power / Chilling Rain / Hammer and Anvil
            {name = "G", primary = "ec78cd", mission = "db0022", deployment = "117c77"},
            -- The Ritual / Chilling Rain / Hammer and Anvil
            {name = "H", primary = "646b49", mission = "db0022", deployment = "117c77"},
            -- Take and Hold / Hidden Supplies / Hammer and Anvil
            {name = "I", primary = "884291", mission = "0dc3c3", deployment = "117c77"},
            -- Priority Targets / Chilling Rain / Crucible of Battle
            {name = "J", primary = "f97708", mission = "db0022", deployment = "3c0679"},
            -- Deploy Servo-skulls / Hidden Supplies / Crucible of Battle
            {name = "K", primary = "44ff29", mission = "0dc3c3", deployment = "3c0679"},
            -- Scorched Earth / Chilling Rain / Dawn of War
            {name = "L", primary = "3ad5a3", mission = "db0022", deployment = "7e4b95"},
            -- Purge the Foe / Chilling Rain / Crucible of Battle
            {name = "M", primary = "5444d4", mission = "db0022", deployment = "3c0679"},
            -- Priority Targets / Chosen Battlefield / Dawn of War
            {name = "N", primary = "f97708", mission = "876ac7", deployment = "7e4b95"},
            -- Vital Ground / Chilling Rain / Crucible of Battle
            {name = "O", primary = "6fc1c2", mission = "db0022", deployment = "3c0679"}
        }
    },
    {
        id = MISSION_PACK_PARIAH_NEXUS,
        name = "Pariah Nexus",
        deploymentDeck_GUID = "2dc2e8",
        missionDeck_GUID = "ffdf05",
        primaryDeck_GUID = "d26e9c",
        gambitDeck_GUID = "79d2ae",
        fixedSecondaryDeck_GUID = "b55459",
        redSecondaryDeck_GUID = "c0fb49",
        blueSecondaryDeck_GUID = nil,
        tournamentMissions = {
            -- A: Take and Hold / Raise Banners / Tipping Point
            {name = "A", primary = "bffd57", mission = "62e744", deployment = "77cde6"},
            -- B: Purge the Foe / Smoke and Mirrors / Tipping Point
            {name = "B", primary = "d9d35a", mission = "25b5a6", deployment = "77cde6"},
            -- C: Linchpin / Fog of War / Tipping Point
            {name = "C", primary = "540fd0", mission = "c58f11", deployment = "77cde6"},
            -- D: Scorched Earth / Swift Action / Tipping Point
            {name = "D", primary = "6860de", mission = "dc273c", deployment = "77cde6"},
            -- E: Take and Hold / Prepared Positions / Hammer and Anvil
            {name = "E", primary = "bffd57", mission = "9789b7", deployment = "97f3f0"},
            -- F: Burden of Trust / Hidden Supplies / Hammer and Anvil
            {name = "F", primary = "85718e", mission = "c4fe8c", deployment = "97f3f0"},
            -- G: The Ritual / Stalwarts / Hammer and Anvil
            {name = "G", primary = "7067e2", mission = "8b7dbc", deployment = "97f3f0"},
            -- H: Supply Drop / Smoke and Mirrors / Hammer and Anvil
            {name = "H", primary = "981226", mission = "25b5a6", deployment = "97f3f0"},
            -- I: Burden of Trust / Prepared Positions / Search and Destroy
            {name = "I", primary = "85718e", mission = "9789b7", deployment = "09c961"},
            -- J: Linchpin / Raise Banners / Search and Destroy
            {name = "J", primary = "540fd0", mission = "62e744", deployment = "09c961"},
            -- K: Scorched Earth / Stalwarts / Search and Destroy
            {name = "K", primary = "6860de", mission = "8b7dbc", deployment = "09c961"},
            -- L: Take and Hold / Hidden Supplies / Search and Destroy
            {name = "L", primary = "bffd57", mission = "c4fe8c", deployment = "09c961"},
            -- M: Purge the Foe / Rapid Escalation / Crucible of Battle
            {name = "M", primary = "d9d35a", mission = "d35008", deployment = "e96d18"},
            -- N: The Ritual / Swift Action / Crucible of Battle
            {name = "N", primary = "7067e2", mission = "dc273c", deployment = "e96d18"},
            -- O: Terraform / Stalwarts / Crucible of Battle
            {name = "O", primary = "7fa6d0", mission = "8b7dbc", deployment = "e96d18"},
            -- P: Scorched Earth / Inspired Leadership / Crucible of Battle
            {name = "P", primary = "6860de", mission = "499169", deployment = "e96d18"},
            -- Q: Supply Drop / Rapid Escalation / Sweeping Engagement
            {name = "Q", primary = "981226", mission = "d35008", deployment = "c6edf3"},
            -- R: Terraform / Swift Action / Sweeping Engagement
            {name = "R", primary = "7fa6d0", mission = "dc273c", deployment = "c6edf3"},
            -- S: Linchpin / Raise Banners / Dawn of War
            {name = "S", primary = "540fd0", mission = "62e744", deployment = "7f45dc"},
            -- T: Unexploded Ordnance / Inspired Leadership / Dawn of War
            {name = "T", primary = "41f293", mission = "499169", deployment = "7f45dc"}
        }
    },
}

turnOrder = {}
nonPlaying = {"White", "Brown","Orange","Yellow","Green","Teal","Purple","Pink"}
allowMenu = true
allowAutoSeat = true
redPlayerID = ""
bluePlayerID = ""

function onSave()
    saved_data = JSON.encode({
                                svredPlayerID = redPlayerID,
                                svbluePlayerID = bluePlayerID
                            })
    --saved_data = ""
    return saved_data
end

function onLoad(saved_data)
    Turns.enable=false
    --- load vars from saved
    if saved_data ~= "" then
         local loaded_data = JSON.decode(saved_data)
         redPlayerID = loaded_data.svredPlayerID
         bluePlayerID = loaded_data.svbluePlayerID
    else
        redPlayerID = ""
        bluePlayerID = ""
    end
    ---- end loading
    if allowMenu then
        if allowAutoSeat and redPlayerID ~= "" and bluePlayerID ~= "" then --  if the game is not started dont autoseat
                autoSeatAll()
        else
            Global.UI.setAttribute("main", "active", "true")
            local presentPersons= Player.getPlayers()
            for i, person in ipairs(presentPersons) do
                person.team="Diamonds"
            end
            presentPersons= Player.getSpectators()
            for i, person in ipairs(presentPersons) do
                person.team="Diamonds"
            end
            showHideRedBlueBtn()
        end
    else
        Global.UI.setAttribute("main", "active", "false")
    end
end

function autoSeatPerson(_person)
    if _person.steam_id == redPlayerID then
        if Player.Red.seated then
            Player.Red.changeColor("Grey")
        end
        _person.changeColor("Red")
        _person.team="None"
        return
    end
    if _person.steam_id == bluePlayerID then
        if Player.Blue.seated then
            Player.Blue.changeColor("Grey")
        end
        _person.changeColor("Blue")
        _person.team="None"
        return
    end
    --_person.changeColor("Grey")
    _person.team="None"
end

function autoSeatGroup(persons)
    for i, person in ipairs(persons) do
        autoSeatPerson(person)
    end
end

function autoSeatAll()
    if redPlayerID=="" or bluePlayerID=="" then --  if the game is not started dont autoseat
        return
    end
    local presents = Player.getPlayers()
    autoSeatGroup(presents)
    presents = Player.getSpectators()
    autoSeatGroup(presents)
end

function recordPlayers()
    redPlayerID = Player.Red.steam_id
    bluePlayerID = Player.Blue.steam_id
end

function onPlayerChangeColor(player_color)
    promotePlayers()
    --demotePlayers()  -- RIC
    showHideRedBlueBtn()
end

function onPlayerConnect(player_id)
    if allowMenu then
        if allowAutoSeat and redPlayerID ~= "" and bluePlayerID ~= "" then --  if the game is not started dont autoseat
                autoSeatPerson(player_id)
        else
        player_id.team="Diamonds"
        end
    end
end

function promotePlayers()
    local colors={"Red", "Blue", "Orange", "Yellow", "Purple", "Teal"}
    for i, color in ipairs(colors) do
        if Player[color].seated and  Player[color].host == false and not Player[color].promoted then
            Player[color].promote()
        end
    end
end

function demotePlayers()
    for i, color in ipairs(nonPlaying) do
        if Player[color].seated  and Player[color].host == false then
            Player[color].promote(false)
        end
    end
    local spectators=Player.getSpectators()
    for i, person in ipairs(spectators) do
        if person.host == false then
            person.promote(false)
        end
    end
end

function promotePlayersOnConnect()  --NOT USED
    if player_color == "Red" or player_color == "Blue"  then
        Player["Red"].promote(true)
        Player["Blue"].promote(true)
    end
end

function showHideRedBlueBtn()
    if allowMenu then
        if Player.Red.seated == true then
            Global.UI.setAttribute("redBtn", "active", "false")
        else
            Global.UI.setAttribute("redBtn", "active", "true")
        end
        if Player.Blue.seated == true then
            Global.UI.setAttribute("blueBtn", "active", "false")
        else
            Global.UI.setAttribute("blueBtn", "active", "true")
        end
    end
end

function setViewForPlayer(player, color)
    if color=="Grey" then return end
    local pos= {0,0,0}
    if color == "Red" then
        pos = getObjectFromGUID(redDiceMat_GUID).getPosition()
    end
    if color == "Blue" then
        pos = getObjectFromGUID(blueDiceMat_GUID).getPosition()
    end
    player.lookAt({
        position = pos,
        pitch    = 25,
        yaw      = 180,
        distance = 20,
        })
end

function placeToColor(player, color)
    player.changeColor(color)
    player.team="None"
    broadcastToColor("READ INSTRUCTIONS FIRST!\n(Click Notebook at the top)", color, "Purple")
    --setViewForPlayer(player, color) --bugged
end

function placeToRed(player, value, id)
    placeToColor(player, "Red")
    --player.changeColor("Red")
    --player.team="None"
end

function placeToBlue(player, value, id)
    placeToColor(player, "Blue")
    --player.changeColor("Blue")
    --player.team="None"
end

function placeToGray(player, value, id)
    placeToColor(player, "Grey")
    --player.changeColor("Grey")
    --player.team="None"
end
function closeMenu(player, value, id)
    player.team="None"
    broadcastToColor("READ INSTRUCTIONS FIRST!\n(Click Notebook at the top)", player.color, "Purple")
end

backPosition={{0,0,0},{0,0,0},{0,0,0},{0,0,0}}
function goToDiceRoller(player, value, id)
    local matPositionOffset=12
    local color=player.color
    local diceMatGUID=redDiceMat_GUID
    local i=1
    if color == "Red" then
        i=1
    end
    if color == "Orange" then
        i=2
    end
    if color == "Blue" then
        diceMatGUID = blueDiceMat_GUID
        i=3
        matPositionOffset=-matPositionOffset
    end
    if color == "Teal" then
        diceMatGUID = blueDiceMat_GUID
        i=4
        matPositionOffset=-matPositionOffset
    end
    if Player[color].getSelectedObjects()[1] ~= nil then
        backPosition[i]=Player[color].getSelectedObjects()[1].getPosition()
    end

    local matPos=getObjectFromGUID(diceMatGUID).getPosition()
    matPos.x=matPos.x+matPositionOffset
    moveCameraTo(matPos,30,color)
end

function goToSquad(player, value, id)
    local i = 1
    local color=player.color
    if color == "Red" then
        i=1
    end
    if color == "Orange" then
        i=2
    end
    if color == "Blue" then
        i=3
    end
    if color == "Teal" then
        i=4
    end
    moveCameraTo(backPosition[i], 20, color)
end
function moveCameraTo(pos, dist, color)
    if color == "Red" then
        rot = {0,180,0}
    end
    if color == "Orange" then
        rot = {0,180,0}
    end
    if color == "Blue" then
        rot = {0,0,0}
    end
    if color == "Teal" then
        rot = {0,0,0}
    end
    if pos[2]==0 then dist=dist+30 end
    Player[color].lookAt({position=pos, pitch=90, yaw=rot[2], distance=dist})
end

function moveAllFromZoneToDeck(params)
    local zoneObj = getObjectFromGUID(Global.getVar(params.zone .. "CardZone_GUID"))
    local deckObj = getObjectFromGUID(params.deck .. "Deck_GUID")

    local objects = zoneObj.getObjects()
    for _,object in ipairs(objects) do
        object.locked = false
        deckObj.putObject(object)
    end

    deckObj.shuffle()
end

function moveOneFromDeckToZone(params)
    local zoneObj = getObjectFromGUID(Global.getVar(params.zone .. "CardZone_GUID"))
    local deckObj = getObjectFromGUID(params.deck .. "Deck_GUID")
    local takeParams = {}
    takeParams.position = zoneObj.getPosition()
    takeParams.flip = true
    takeParams.smooth = true
    takeParams.callback_function = function(card)
        Wait.frames(function()
            card.locked = true
        end)
    end
    if params["card"] then
        takeParams.guid = params.card
    else
        deckObj.shuffle()
    end
    deckObj.takeObject(takeParams)
end
